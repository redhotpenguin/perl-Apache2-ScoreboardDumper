package Apache2::ScoreboardDumper;

use strict;
use warnings;

use Apache2::Scoreboard;
use Apache2::RequestRec;
use Apache2::Log;

our %Key = (
    '_' => 'Waiting for Connection',
    'S' => 'Starting up',
    'R' => 'Reading Request',
    'W' => 'Sending Reply',
    'K' => 'Keepalive (read)',
    'D' => 'DNS Lookup',
    'C' => 'Closing connection',
    'L' => 'Logging',
    'G' => 'Gracefully finishing',
    'I' => 'Idle cleanup of worker',
    '.' => 'Open slot with no current process'
);

sub handler {
    my ( $class, $r ) = @_;

    # see if all the server slots are full
    my $image        = Apache::Scoreboard->image( $r->pool );
    my $servers_left = $image->server_limit - scalar( @{ $image->pids } );
    if ( $servers_left == 0 ) {

        my $dump_method = $r->dir_config( 'ScoreboardDumpMethod' ) || die 'ScoreboardDumpMethod not set';
        if ( $dump_method eq 'LockFreq' ) {

            # we are using locking
            my $lock_class = $r->dir_config( 'ScoreboardDumpLock' ) || die 'ScoreboardDumpLock not set';
            my $score_freq = $r->dir_config( 'ScoreboardDumpFreq' ) || die 'ScoreboardDumpLock not set';

            no strict 'refs';
            $lock_class->lock();
            my ( $count, $fulltime ) = $lock_class->getvars();
            my $now = time();
            if ( $now - $fulltime > $score_freq ) {
                $r->log->debug( "All Servers used enabling instrumentation at $now" );
                $fulltime = $now;
            }
            $lock_class->setvars( $count, $fulltime );
            $lock_class->unlock();

            # dump the scoreboard to the log
            $class->dump_scoreboard( $r ) if $now == $fulltime;

        } elsif ( $dump_method eq 'Stochastic' ) {

            my $stoc_freq = $r->dir_config( 'ScoreboardDumpStochastic' ) || die 'ScoreboardDumpStochastic not set';
            if ( sprintf( '%.1f', rand( 1 ) ) <= $stoc_freq ) {

                # dump the scoreboard if less than specified value
                $class->dump_scoreboard( $r );
            }

        } elsif ( $dump_method eq 'All' ) {
            $class->dump_scoreboard( $r );
        }
    }

}


sub dump_scoreboard {
    my ($class, $r) = @_;






}

1;

__END__

=head1 NAME

Apache2::ScoreboardDumper - Dumps the scoreboard to the error log when server slots are full

=head1 SYNOPSIS

In your httpd.conf:

 PerlInitHandler Apache2::ScoreboardDumper
 PerlSetVar ScoreboardDumpMethod All | LockFreq | Stochastic
 PerlSetVar ScoreboardDumpFreq 5 # dump every 5th request
 PerlSetVar ScoreboardDumpLock My::LockPackage # optional class to provide lock and unlock
 PerlSetVar ScoreboardDumpStochastic 0.5 # 0-1, percentage of time to dump scoreboard


=head1 DESCRIPTION

Stub documentation for Apache2::ScoreboardDumper, created by h2xs. It looks like the
author of the extension was negligent enough to leave the stub
unedited.

Blah blah blah.

=head2 EXPORT

None by default.



=head1 SEE ALSO

Mention other useful documentation such as the documentation of
related modules or operating system documentation (such as man pages
in UNIX), or any relevant external documentation such as RFCs or
standards.

If you have a mailing list set up for your module, mention it here.

If you have a web site set up for your module, mention it here.

=head1 AUTHOR

Fred Moyer, E<lt>fredmoyer@apple.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2014 by Fred Moyer

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.16.2 or,
at your option, any later version of Perl 5 you may have available.



=cut
